// Copyright (c) 2021 Всратослав Бурый
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.
package main

import (
	"os"
	"testing"
)

// guardLenght проверяет чтобы параметры want и got были оба были не равны нулю
// и были равны друг другу. Используется для исключения ошибки при сравнении
// двух массивов. Возвращает true при ошибке, иначе false.
func guardLenght(t *testing.T, header string, want, got int) bool {
	t.Helper()
	if want == 0 || got == 0 {
		t.Errorf(header + " должны быть не равны нулю")
		return true
	}

	if want != got {
		t.Errorf(header+" длины не равны:, требуется: %d, имеется: %d", want, got)
		return true
	}

	return false
}

// compareStrings сравнивает значения двух массивов строк. Если строки для
// данного индекса не равны, выводит сообщение об ошибке с указанием строк
// которые не равны друг другу.
func compareStrings(t *testing.T, header string, want, got []string) {
	t.Helper()
	for i := 0; i < len(want); i++ {
		if want[i] != got[i] {
			t.Errorf(header+" строки не равны: требуется: %s, имеется: %s", want[i], got[i])
		}
	}
}

// Test_Projects тестирует функцию создания списка директорий в которых, в корне
// директории находиться один или несколько маркеров проекта, директория .git,
// файл Makefile, или файл go.mod. Список проектов это массив строк, каждая
// строка это путь к папке проекта. При создании списка проектов должны
// игнорироваться скрытые директории, название которых начинается с «.».
//
// Проверка проводиться на тестовой директории с проектами. В результате
// проверки должно быть найдено определённое количество проектов и соответствие
// найденных путей к проекту с определённым тестом путям.
//
// В тестовой директории находятся четыре проекта, один из них ошибочный и
// должен быть проигнорирован. Другой имеет несколько маркеров проекта
// одновременно, он должен быть распознан как один проект, а не два. Для
// проверки игнорирования скрытых директорий третий проект, название его
// начинается с «.». И четвёртый проект без дополнительных проверок.
func Test_Projects(t *testing.T) {
	header := "список проектов:"

	got, err := FindProjects(os.DirFS("."), "testdata",
		[]string{".git", "go.mod", "Makefile"})
	if err != nil {
		t.Fatal(err)
	}

	want := []string{"testdata/hello", "testdata/world"}

	if guardLenght(t, header, len(want), len(got)) {
		t.Fatal("результат:", got)
	}

	compareStrings(t, header, want, got)
}

// Test_Filelist тестируем функцию создания списка текстовых файлов для
// указанной директории. Файл определяется как текстовой на основании его
// расширения, например, *.go, *.md. Список файлов это массив строк, каждая
// строка представляет путь к файлу. Поиск осуществляется по всем вложенным
// директориям.
//
// Проверка проводиться на основе тестовой директории с файлами. Директория
// содержит файлы с различными расширениями. После получения списка, сравниваем
// его с контрольным списком.
//
// Функции передаются директория и список расширений в формате файловых
// шаблонов. Функция возвращает список файлов как массив строк или код ошибки
// файловой системы.
func Test_Filelist(t *testing.T) {
	header := "список файлов:"

	got, err := FindFiles(os.DirFS("."), "testdata/hello", []string{"*.go", "*.mod"})
	if err != nil {
		t.Fatal(err)
	}

	want := []string{"testdata/hello/go.mod", "testdata/hello/main_hello.go"}

	if guardLenght(t, header, len(want), len(got)) {
		t.Fatal("результат:", got)
	}

	compareStrings(t, header, want, got)
}
